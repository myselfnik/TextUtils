{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","Object","slicedToArray","myStyle","setmyStyle","_useState3","_useState4","btnText","setBtnText","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Alert","props","classes","concat","alertType","role","alertMsg","data-bs-dismiss","aria-label","Navbar","mode","dist","to","title","aria-current","aboutText","placeholder","toggleMode","htmlFor","TextForm","text","setText","Fragment","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","trim","length","defaultProps","App","setMode","setAlertType","_useState5","_useState6","setAlertMsg","body","setTimeout","components_Alert","react_router_dist","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.caca2b90.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function About() {\n  const [myStyle, setmyStyle] = useState({\n    color: \"black\",\n    backgroundColor: \"white\",\n  });\n\n  const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\n\n  const toggleStyle = () => {\n    if (myStyle.color === \"black\") {\n      setmyStyle({\n        color: \"white\",\n        backgroundColor: \"black\",\n        border: \"1px solid white\",\n      });\n      setBtnText(\"Enable Light Mode\");\n    } else {\n      setmyStyle({\n        color: \"black\",\n        backgroundColor: \"white\",\n\n      });\n      setBtnText(\"Enable Dark Mode\");\n    }\n  };\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h1>About Us</h1>\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n              style={myStyle}\n            >\n              Accordion Item #1\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the first item's accordion body.</strong> It is\n              shown by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n              style={myStyle}\n            >\n              Accordion Item #2\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the second item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n              style={myStyle}\n            >\n              Accordion Item #3\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n            style={myStyle}\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              <strong>This is the third item's accordion body.</strong> It is\n              hidden by default, until the collapse plugin adds the appropriate\n              classNamees that we use to style each element. These classNamees\n              control the overall appearance, as well as the showing and hiding\n              via CSS transitions. You can modify any of this with custom CSS or\n              overriding our default variables. It's also worth noting that just\n              about any HTML can go within the <code>.accordion-body</code>,\n              though the transition does limit overflow.\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container my-1\">\n        <button\n          type=\"button\"\n          className=\"btn btn-primary my-1\"\n          onClick={toggleStyle}\n        >\n          {btnText}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n const classes = `alert alert-${props.alertType} alert-dismissible fade show`;\n  return (\n    <div>\n        <div className={classes} role=\"alert\">\n        <strong>{props.alertMsg}</strong> \n        <button\n          type=\"button\"\n          className=\"btn-close\"\n          data-bs-dismiss=\"alert\"\n          aria-label=\"Close\"\n        ></button>\n      </div>\n    </div>\n  );\n}\n\nexport default Alert;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link\" to=\"/about\">\n                {props.aboutText}\n              </Link>\n            </li>\n            <li className=\"nav-item dropdown\">\n              <Link\n                className=\"nav-link dropdown-toggle\"\n                to=\"/\"\n                role=\"button\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\"\n              >\n                Dropdown\n              </Link>\n              <ul className=\"dropdown-menu\">\n                <li>\n                  <Link className=\"dropdown-item\" to=\"/\">\n                    Action\n                  </Link>\n                </li>\n                <li>\n                  <Link className=\"dropdown-item\" to=\"/\">\n                    Another action\n                  </Link>\n                </li>\n                <li>\n                  <hr className=\"dropdown-divider\" />\n                </li>\n                <li>\n                  <Link className=\"dropdown-item\" to=\"/\">\n                    Something else here\n                  </Link>\n                </li>\n              </ul>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link disabled\">Disabled</Link>\n            </li>\n          </ul>\n          <form className=\"d-flex\" role=\"search\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button>\n          </form>\n        </div>\n\n        <div\n          className={`form-check form-switch text-${\n            props.mode === \"light\" ? \"dark\" : \"light\"\n          }`}\n        >\n          <input\n            className=\"form-check-input\"\n            onClick={props.toggleMode}\n            type=\"checkbox\"\n            role=\"switch\"\n            id=\"flexSwitchCheckDefault\"\n          />\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\n            Enable DarkMode\n          </label>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n  title: \"Type title here...\",\n  aboutText: \"set abouttext here ...\",\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    console.log(\"Uppercase was clicked\" + text);\n    let newText = text.toUpperCase();\n\n    setText(newText);\n  };\n\n  const handleDownClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n  };\n\n  const handleOnChange = (event) => {\n    console.log(\"handleOnChange was clicked\");\n    setText(event.target.value);\n  };\n\n  const handleClearClick = () => {\n    let newText = \"\";\n    setText(newText);\n  };\n\n  const handleCopy = () => {\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n  };\n\n  const handleExtraSpace = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n  };\n\n  const [text, setText] = useState(\"\");\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\n            }}\n            id=\"myBox\"\n            rows=\"5\"\n          ></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\n          Convert to UpperCase\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={handleDownClick}>\n          Convert to LowerCase\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\n          Clear\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\n          Copy Text\n        </button>\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpace}>\n          Remove Extra Spaces\n        </button>\n      </div>\n      <div className=\"container my-1\">\n        <h2> Your Text Summary</h2>\n        {/* <p>\n          {text.split(\" \").length} words and {text.length}characters\n         <br></br>{0.008 * text.split(\" \").length}Minutes Read. </p> */}\n        {/* <p>{text.trim()===\"\"?'0' : text.trim().split(\"\").length} words and {text.length} characters.</p> */}\n        <p>\n          {text.trim() === \"\" ? \"0\" : text.split(\" \").length} words and{\" \"}\n          {text.length}characters\n          <br></br>\n          {0.008 * text.split(\" \").length}Minutes Read.\n        </p>\n      </div>\n      <div className=\"container my-1\">\n        <h3>Preview</h3>\n        <p>\n          {text.length > 0\n            ? text\n            : \"Enter something in the textbox above to preview it here.\"}\n        </p>\n      </div>\n    </>\n  );\n}\n","import \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport { useState } from \"react\";\nimport React from \"react\";\nimport { BrowserRouter, Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // whether dark mode is enabled or not\n\n  const [alertType, setAlertType] = useState(null);\n  const [alertMsg, setAlertMsg] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      document.body.style.color = \"white\";\n      setAlertType(\"success\");\n      setAlertMsg(\"Dark Mode has been enabled\");\n      setTimeout(() => {\n        setAlertType(null);\n      }, 2000);\n\n      document.title = \"TextUtils - DarkMode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      setAlertType(\"warning\");\n      setAlertMsg(\"Light Mode has been enabled\");\n      setTimeout(() => {\n        setAlertType(null);\n      }, 2000);\n      document.title = \"TextUtils - LightMode\";\n    }\n  };\n\n  return (\n    <>\n      <BrowserRouter>\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        {alertType ? <Alert alertType={alertType} alertMsg={alertMsg} /> : null}\n        <div className=\"container my-2\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About />} />\n            <Route\n              exact\n              path=\"/\"\n              element={\n                <TextForm heading=\"Enter the text to analyze\" mode={mode} />\n              }\n            />\n          </Routes>\n        </div>\n        {/* <div className=\"container my-2\">\n          <About />\n        </div> */}\n      </BrowserRouter>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}